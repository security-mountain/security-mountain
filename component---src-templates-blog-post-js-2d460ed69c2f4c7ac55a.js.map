{"version":3,"file":"component---src-templates-blog-post-js-2d460ed69c2f4c7ac55a.js","mappings":"uJAWMA,EAAU,SAAC,GAA4C,IAAD,EAAzCC,EAAyC,EAAzCA,YAAmBC,GAAsB,EAA5BC,KAA4B,EAAtBD,OAAOE,EAAe,EAAfA,SACnCC,GAASC,EAAAA,EAAAA,IAAe,cAAxBD,KAaFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBN,MAExC,OACE,gCACE,6BAAQO,EAAkBP,EAAN,MAAiBO,EAAiBP,GACtD,wBAAMQ,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAAST,IACnC,wBAAMU,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAElC,wBAAMD,KAAK,gBAAgBC,QAAST,IACpC,wBAAMQ,KAAK,sBAAsBC,QAASJ,IAE1C,wBAAMM,IAAI,aAAaC,KAAK,WAAWC,KAAK,8EAE3CX,EAGN,EAEDJ,EAAQgB,aAAe,CACrBf,YAAY,IAQd,K,+CCZA,IAzCe,SAAC,GAAiD,IAG3DgB,EAHYC,EAA8C,EAA9CA,SAAUhB,EAAoC,EAApCA,MAAOE,EAA6B,EAA7BA,SAAUe,EAAmB,EAAnBA,aAErCC,EADQ,MACKF,EAASG,SAI5B,OAAIF,EAEA,uBAAKG,UAAU,2BAA2B,oBAAmBF,GAC1DhB,IAMLa,EADEG,EAEA,sBAAIE,UAAU,gBACZ,gBAAC,KAAD,CAAMC,GAAG,KAAKrB,IAKhB,gBAAC,KAAD,CAAMoB,UAAU,mBAAmBC,GAAG,KACnCrB,GAML,uBAAKoB,UAAU,iBAAiB,oBAAmBF,GACjD,0BAAQE,UAAU,iBAAiBL,GACnC,4BAAOb,GACP,oCACK,IAAIoB,MAAOC,cADhB,mBAGE,qBAAGV,KAAK,4BAAR,YAIP,C,6GCIYW,EAAO,SAAC,GAAwC,IAAdC,EAAa,EAArCC,KAAQC,eAC7B,OACE,gBAAC,IAAD,CACE3B,MAAOyB,EAAKG,YAAY5B,MACxBD,YAAa0B,EAAKG,YAAY7B,aAGnC,EAED,UAjDyB,SAAC,GAGnB,IAAD,MAFJ2B,KAAwBvB,GAEpB,EAFI0B,SAEJ,EAFcC,KAEd,EAFoB3B,MAAsBsB,EAE1C,EAF0BE,eAC9BX,EACI,EADJA,SAEMe,GAAY,UAAA5B,EAAKG,oBAAL,eAAmBN,QAAnB,oBAElB,OACE,gBAAC,IAAD,CAAQgB,SAAUA,EAAUhB,MAAO+B,GACjC,2BACEX,UAAU,YACVY,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYT,EAAKG,YAAY5B,OAC1C,yBAAIyB,EAAKG,YAAYO,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQZ,EAAKG,YAAY7B,aACpDmC,SAAS,gBAEX,2BACA,gCAEF,uBAAKd,UAAU,iBACb,sBACEkB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,MAOpB,C","sources":["webpack://gatsby-starter-blog/./src/components/app-head.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst AppHead = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css\" />\n      \n      {children}\n    </>\n  );\n};\n\nAppHead.defaultProps = {\n  description: ``,\n};\n\nAppHead.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default AppHead;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst Layout = ({ location, title, children, isFullScreen }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n  let header;\n\n  // If it's a 'full screen' page, don't show the header and footer.\n  if (isFullScreen) {\n    return (\n      <div className=\"body-full-screen-wrapper\" data-is-root-path={isRootPath}>\n        {children}\n      </div>\n    );\n  }\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    );\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport AppHead from \"../components/app-head\";\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Security Mountain`;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.frontmatter.description }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer></footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <AppHead\n      title={post.frontmatter.title}\n      description={post.frontmatter.description}\n    />\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["AppHead","description","title","lang","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","rel","type","href","defaultProps","header","location","isFullScreen","isRootPath","pathname","className","to","Date","getFullYear","Head","post","data","markdownRemark","frontmatter","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","style","display","flexWrap","justifyContent","listStyle","padding"],"sourceRoot":""}